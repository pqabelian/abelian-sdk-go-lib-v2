// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: core.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxInDescMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height           int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	BlockID          []byte `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	TxVersion        uint32 `protobuf:"varint,3,opt,name=txVersion,proto3" json:"txVersion,omitempty"`
	TxID             []byte `protobuf:"bytes,4,opt,name=txID,proto3" json:"txID,omitempty"`
	Index            int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	TxOutData        []byte `protobuf:"bytes,6,opt,name=txOutData,proto3" json:"txOutData,omitempty"`
	Value            int64  `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	CoinSerialNumber []byte `protobuf:"bytes,8,opt,name=coinSerialNumber,proto3" json:"coinSerialNumber,omitempty"`
}

func (x *TxInDescMessage) Reset() {
	*x = TxInDescMessage{}
	mi := &file_core_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxInDescMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInDescMessage) ProtoMessage() {}

func (x *TxInDescMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInDescMessage.ProtoReflect.Descriptor instead.
func (*TxInDescMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{0}
}

func (x *TxInDescMessage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TxInDescMessage) GetBlockID() []byte {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *TxInDescMessage) GetTxVersion() uint32 {
	if x != nil {
		return x.TxVersion
	}
	return 0
}

func (x *TxInDescMessage) GetTxID() []byte {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *TxInDescMessage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TxInDescMessage) GetTxOutData() []byte {
	if x != nil {
		return x.TxOutData
	}
	return nil
}

func (x *TxInDescMessage) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TxInDescMessage) GetCoinSerialNumber() []byte {
	if x != nil {
		return x.CoinSerialNumber
	}
	return nil
}

type TxOutDescMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbelAddress []byte `protobuf:"bytes,1,opt,name=abelAddress,proto3" json:"abelAddress,omitempty"`
	Value       int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TxOutDescMessage) Reset() {
	*x = TxOutDescMessage{}
	mi := &file_core_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxOutDescMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutDescMessage) ProtoMessage() {}

func (x *TxOutDescMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutDescMessage.ProtoReflect.Descriptor instead.
func (*TxOutDescMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{1}
}

func (x *TxOutDescMessage) GetAbelAddress() []byte {
	if x != nil {
		return x.AbelAddress
	}
	return nil
}

func (x *TxOutDescMessage) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BlockDescMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinData []byte `protobuf:"bytes,1,opt,name=binData,proto3" json:"binData,omitempty"`
	Height  int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *BlockDescMessage) Reset() {
	*x = BlockDescMessage{}
	mi := &file_core_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDescMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDescMessage) ProtoMessage() {}

func (x *BlockDescMessage) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDescMessage.ProtoReflect.Descriptor instead.
func (*BlockDescMessage) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{2}
}

func (x *BlockDescMessage) GetBinData() []byte {
	if x != nil {
		return x.BinData
	}
	return nil
}

func (x *BlockDescMessage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GenerateSafeCryptoSeedArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivacyLevel int32 `protobuf:"varint,1,opt,name=privacyLevel,proto3" json:"privacyLevel,omitempty"`
}

func (x *GenerateSafeCryptoSeedArgs) Reset() {
	*x = GenerateSafeCryptoSeedArgs{}
	mi := &file_core_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSafeCryptoSeedArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSafeCryptoSeedArgs) ProtoMessage() {}

func (x *GenerateSafeCryptoSeedArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSafeCryptoSeedArgs.ProtoReflect.Descriptor instead.
func (*GenerateSafeCryptoSeedArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateSafeCryptoSeedArgs) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

type GenerateSafeCryptoSeedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendKeyRootSeed    []byte `protobuf:"bytes,1,opt,name=spendKeyRootSeed,proto3" json:"spendKeyRootSeed,omitempty"`
	SerialNoKeyRootSeed []byte `protobuf:"bytes,2,opt,name=serialNoKeyRootSeed,proto3" json:"serialNoKeyRootSeed,omitempty"`
	ViewKeyRootSeed     []byte `protobuf:"bytes,3,opt,name=viewKeyRootSeed,proto3" json:"viewKeyRootSeed,omitempty"`
	DetectorRootKey     []byte `protobuf:"bytes,4,opt,name=detectorRootKey,proto3" json:"detectorRootKey,omitempty"`
}

func (x *GenerateSafeCryptoSeedResult) Reset() {
	*x = GenerateSafeCryptoSeedResult{}
	mi := &file_core_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateSafeCryptoSeedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSafeCryptoSeedResult) ProtoMessage() {}

func (x *GenerateSafeCryptoSeedResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSafeCryptoSeedResult.ProtoReflect.Descriptor instead.
func (*GenerateSafeCryptoSeedResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateSafeCryptoSeedResult) GetSpendKeyRootSeed() []byte {
	if x != nil {
		return x.SpendKeyRootSeed
	}
	return nil
}

func (x *GenerateSafeCryptoSeedResult) GetSerialNoKeyRootSeed() []byte {
	if x != nil {
		return x.SerialNoKeyRootSeed
	}
	return nil
}

func (x *GenerateSafeCryptoSeedResult) GetViewKeyRootSeed() []byte {
	if x != nil {
		return x.ViewKeyRootSeed
	}
	return nil
}

func (x *GenerateSafeCryptoSeedResult) GetDetectorRootKey() []byte {
	if x != nil {
		return x.DetectorRootKey
	}
	return nil
}

type GenerateCryptoKeysAndAddressByRootSeedsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendKeyRootSeed    []byte `protobuf:"bytes,1,opt,name=spendKeyRootSeed,proto3" json:"spendKeyRootSeed,omitempty"`
	SerialNoKeyRootSeed []byte `protobuf:"bytes,2,opt,name=serialNoKeyRootSeed,proto3" json:"serialNoKeyRootSeed,omitempty"`
	ViewKeyRootSeed     []byte `protobuf:"bytes,3,opt,name=viewKeyRootSeed,proto3" json:"viewKeyRootSeed,omitempty"`
	DetectorRootKey     []byte `protobuf:"bytes,4,opt,name=detectorRootKey,proto3" json:"detectorRootKey,omitempty"`
	PrivacyLevel        int32  `protobuf:"varint,5,opt,name=privacyLevel,proto3" json:"privacyLevel,omitempty"`
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) Reset() {
	*x = GenerateCryptoKeysAndAddressByRootSeedsArgs{}
	mi := &file_core_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCryptoKeysAndAddressByRootSeedsArgs) ProtoMessage() {}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCryptoKeysAndAddressByRootSeedsArgs.ProtoReflect.Descriptor instead.
func (*GenerateCryptoKeysAndAddressByRootSeedsArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) GetSpendKeyRootSeed() []byte {
	if x != nil {
		return x.SpendKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) GetSerialNoKeyRootSeed() []byte {
	if x != nil {
		return x.SerialNoKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) GetViewKeyRootSeed() []byte {
	if x != nil {
		return x.ViewKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) GetDetectorRootKey() []byte {
	if x != nil {
		return x.DetectorRootKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsArgs) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

type GenerateCryptoKeysAndAddressByRootSeedsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendSecretKey    []byte `protobuf:"bytes,1,opt,name=spendSecretKey,proto3" json:"spendSecretKey,omitempty"`
	SerialNoSecretKey []byte `protobuf:"bytes,2,opt,name=serialNoSecretKey,proto3" json:"serialNoSecretKey,omitempty"`
	ViewSecretKey     []byte `protobuf:"bytes,3,opt,name=viewSecretKey,proto3" json:"viewSecretKey,omitempty"`
	DetectorKey       []byte `protobuf:"bytes,4,opt,name=detectorKey,proto3" json:"detectorKey,omitempty"`
	CryptoAddress     []byte `protobuf:"bytes,5,opt,name=cryptoAddress,proto3" json:"cryptoAddress,omitempty"`
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) Reset() {
	*x = GenerateCryptoKeysAndAddressByRootSeedsResult{}
	mi := &file_core_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCryptoKeysAndAddressByRootSeedsResult) ProtoMessage() {}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCryptoKeysAndAddressByRootSeedsResult.ProtoReflect.Descriptor instead.
func (*GenerateCryptoKeysAndAddressByRootSeedsResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{6}
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) GetSpendSecretKey() []byte {
	if x != nil {
		return x.SpendSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) GetSerialNoSecretKey() []byte {
	if x != nil {
		return x.SerialNoSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) GetViewSecretKey() []byte {
	if x != nil {
		return x.ViewSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) GetDetectorKey() []byte {
	if x != nil {
		return x.DetectorKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsResult) GetCryptoAddress() []byte {
	if x != nil {
		return x.CryptoAddress
	}
	return nil
}

type GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendKeyRootSeed    []byte `protobuf:"bytes,1,opt,name=spendKeyRootSeed,proto3" json:"spendKeyRootSeed,omitempty"`
	SerialNoKeyRootSeed []byte `protobuf:"bytes,2,opt,name=serialNoKeyRootSeed,proto3" json:"serialNoKeyRootSeed,omitempty"`
	ViewKeyRootSeed     []byte `protobuf:"bytes,3,opt,name=viewKeyRootSeed,proto3" json:"viewKeyRootSeed,omitempty"`
	DetectorRootKey     []byte `protobuf:"bytes,4,opt,name=detectorRootKey,proto3" json:"detectorRootKey,omitempty"`
	PrivacyLevel        int32  `protobuf:"varint,5,opt,name=privacyLevel,proto3" json:"privacyLevel,omitempty"`
	PublicRand          []byte `protobuf:"bytes,6,opt,name=publicRand,proto3" json:"publicRand,omitempty"`
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) Reset() {
	*x = GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs{}
	mi := &file_core_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) ProtoMessage() {}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs.ProtoReflect.Descriptor instead.
func (*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetSpendKeyRootSeed() []byte {
	if x != nil {
		return x.SpendKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetSerialNoKeyRootSeed() []byte {
	if x != nil {
		return x.SerialNoKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetViewKeyRootSeed() []byte {
	if x != nil {
		return x.ViewKeyRootSeed
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetDetectorRootKey() []byte {
	if x != nil {
		return x.DetectorRootKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetPrivacyLevel() int32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs) GetPublicRand() []byte {
	if x != nil {
		return x.PublicRand
	}
	return nil
}

type GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendSecretKey    []byte `protobuf:"bytes,1,opt,name=spendSecretKey,proto3" json:"spendSecretKey,omitempty"`
	SerialNoSecretKey []byte `protobuf:"bytes,2,opt,name=serialNoSecretKey,proto3" json:"serialNoSecretKey,omitempty"`
	ViewSecretKey     []byte `protobuf:"bytes,3,opt,name=viewSecretKey,proto3" json:"viewSecretKey,omitempty"`
	DetectorKey       []byte `protobuf:"bytes,4,opt,name=detectorKey,proto3" json:"detectorKey,omitempty"`
	CryptoAddress     []byte `protobuf:"bytes,5,opt,name=cryptoAddress,proto3" json:"cryptoAddress,omitempty"`
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) Reset() {
	*x = GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult{}
	mi := &file_core_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) ProtoMessage() {}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult.ProtoReflect.Descriptor instead.
func (*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) GetSpendSecretKey() []byte {
	if x != nil {
		return x.SpendSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) GetSerialNoSecretKey() []byte {
	if x != nil {
		return x.SerialNoSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) GetViewSecretKey() []byte {
	if x != nil {
		return x.ViewSecretKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) GetDetectorKey() []byte {
	if x != nil {
		return x.DetectorKey
	}
	return nil
}

func (x *GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult) GetCryptoAddress() []byte {
	if x != nil {
		return x.CryptoAddress
	}
	return nil
}

type GetCoinAddressFromCryptoAddressArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAddress []byte `protobuf:"bytes,1,opt,name=cryptoAddress,proto3" json:"cryptoAddress,omitempty"`
}

func (x *GetCoinAddressFromCryptoAddressArgs) Reset() {
	*x = GetCoinAddressFromCryptoAddressArgs{}
	mi := &file_core_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinAddressFromCryptoAddressArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAddressFromCryptoAddressArgs) ProtoMessage() {}

func (x *GetCoinAddressFromCryptoAddressArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAddressFromCryptoAddressArgs.ProtoReflect.Descriptor instead.
func (*GetCoinAddressFromCryptoAddressArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinAddressFromCryptoAddressArgs) GetCryptoAddress() []byte {
	if x != nil {
		return x.CryptoAddress
	}
	return nil
}

type GetCoinAddressFromCryptoAddressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinAddress []byte `protobuf:"bytes,1,opt,name=coinAddress,proto3" json:"coinAddress,omitempty"`
}

func (x *GetCoinAddressFromCryptoAddressResult) Reset() {
	*x = GetCoinAddressFromCryptoAddressResult{}
	mi := &file_core_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinAddressFromCryptoAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAddressFromCryptoAddressResult) ProtoMessage() {}

func (x *GetCoinAddressFromCryptoAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAddressFromCryptoAddressResult.ProtoReflect.Descriptor instead.
func (*GetCoinAddressFromCryptoAddressResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinAddressFromCryptoAddressResult) GetCoinAddress() []byte {
	if x != nil {
		return x.CoinAddress
	}
	return nil
}

type ExtractPublicRandFromCoinAddressArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinAddress []byte `protobuf:"bytes,1,opt,name=coinAddress,proto3" json:"coinAddress,omitempty"`
}

func (x *ExtractPublicRandFromCoinAddressArgs) Reset() {
	*x = ExtractPublicRandFromCoinAddressArgs{}
	mi := &file_core_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractPublicRandFromCoinAddressArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPublicRandFromCoinAddressArgs) ProtoMessage() {}

func (x *ExtractPublicRandFromCoinAddressArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPublicRandFromCoinAddressArgs.ProtoReflect.Descriptor instead.
func (*ExtractPublicRandFromCoinAddressArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{11}
}

func (x *ExtractPublicRandFromCoinAddressArgs) GetCoinAddress() []byte {
	if x != nil {
		return x.CoinAddress
	}
	return nil
}

type ExtractPublicRandFromCoinAddressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicRand []byte `protobuf:"bytes,1,opt,name=publicRand,proto3" json:"publicRand,omitempty"`
}

func (x *ExtractPublicRandFromCoinAddressResult) Reset() {
	*x = ExtractPublicRandFromCoinAddressResult{}
	mi := &file_core_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractPublicRandFromCoinAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPublicRandFromCoinAddressResult) ProtoMessage() {}

func (x *ExtractPublicRandFromCoinAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPublicRandFromCoinAddressResult.ProtoReflect.Descriptor instead.
func (*ExtractPublicRandFromCoinAddressResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{12}
}

func (x *ExtractPublicRandFromCoinAddressResult) GetPublicRand() []byte {
	if x != nil {
		return x.PublicRand
	}
	return nil
}

type GetAbelAddressFromCryptoAddressArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAddress []byte `protobuf:"bytes,1,opt,name=cryptoAddress,proto3" json:"cryptoAddress,omitempty"`
	ChainID       int32  `protobuf:"varint,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (x *GetAbelAddressFromCryptoAddressArgs) Reset() {
	*x = GetAbelAddressFromCryptoAddressArgs{}
	mi := &file_core_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbelAddressFromCryptoAddressArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbelAddressFromCryptoAddressArgs) ProtoMessage() {}

func (x *GetAbelAddressFromCryptoAddressArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbelAddressFromCryptoAddressArgs.ProtoReflect.Descriptor instead.
func (*GetAbelAddressFromCryptoAddressArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{13}
}

func (x *GetAbelAddressFromCryptoAddressArgs) GetCryptoAddress() []byte {
	if x != nil {
		return x.CryptoAddress
	}
	return nil
}

func (x *GetAbelAddressFromCryptoAddressArgs) GetChainID() int32 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

type GetAbelAddressFromCryptoAddressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbelAddress []byte `protobuf:"bytes,1,opt,name=abelAddress,proto3" json:"abelAddress,omitempty"`
}

func (x *GetAbelAddressFromCryptoAddressResult) Reset() {
	*x = GetAbelAddressFromCryptoAddressResult{}
	mi := &file_core_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbelAddressFromCryptoAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbelAddressFromCryptoAddressResult) ProtoMessage() {}

func (x *GetAbelAddressFromCryptoAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbelAddressFromCryptoAddressResult.ProtoReflect.Descriptor instead.
func (*GetAbelAddressFromCryptoAddressResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{14}
}

func (x *GetAbelAddressFromCryptoAddressResult) GetAbelAddress() []byte {
	if x != nil {
		return x.AbelAddress
	}
	return nil
}

type GetCryptoAddressFromAbelAddressArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbelAddress []byte `protobuf:"bytes,1,opt,name=abelAddress,proto3" json:"abelAddress,omitempty"`
}

func (x *GetCryptoAddressFromAbelAddressArgs) Reset() {
	*x = GetCryptoAddressFromAbelAddressArgs{}
	mi := &file_core_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCryptoAddressFromAbelAddressArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoAddressFromAbelAddressArgs) ProtoMessage() {}

func (x *GetCryptoAddressFromAbelAddressArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoAddressFromAbelAddressArgs.ProtoReflect.Descriptor instead.
func (*GetCryptoAddressFromAbelAddressArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{15}
}

func (x *GetCryptoAddressFromAbelAddressArgs) GetAbelAddress() []byte {
	if x != nil {
		return x.AbelAddress
	}
	return nil
}

type GetCryptoAddressFromAbelAddressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoAddress []byte `protobuf:"bytes,1,opt,name=cryptoAddress,proto3" json:"cryptoAddress,omitempty"`
}

func (x *GetCryptoAddressFromAbelAddressResult) Reset() {
	*x = GetCryptoAddressFromAbelAddressResult{}
	mi := &file_core_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCryptoAddressFromAbelAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoAddressFromAbelAddressResult) ProtoMessage() {}

func (x *GetCryptoAddressFromAbelAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoAddressFromAbelAddressResult.ProtoReflect.Descriptor instead.
func (*GetCryptoAddressFromAbelAddressResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{16}
}

func (x *GetCryptoAddressFromAbelAddressResult) GetCryptoAddress() []byte {
	if x != nil {
		return x.CryptoAddress
	}
	return nil
}

type GetShortAbelAddressFromAbelAddressArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbelAddress []byte `protobuf:"bytes,1,opt,name=abelAddress,proto3" json:"abelAddress,omitempty"`
}

func (x *GetShortAbelAddressFromAbelAddressArgs) Reset() {
	*x = GetShortAbelAddressFromAbelAddressArgs{}
	mi := &file_core_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShortAbelAddressFromAbelAddressArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortAbelAddressFromAbelAddressArgs) ProtoMessage() {}

func (x *GetShortAbelAddressFromAbelAddressArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortAbelAddressFromAbelAddressArgs.ProtoReflect.Descriptor instead.
func (*GetShortAbelAddressFromAbelAddressArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{17}
}

func (x *GetShortAbelAddressFromAbelAddressArgs) GetAbelAddress() []byte {
	if x != nil {
		return x.AbelAddress
	}
	return nil
}

type GetShortAbelAddressFromAbelAddressResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortAbelAddress []byte `protobuf:"bytes,1,opt,name=shortAbelAddress,proto3" json:"shortAbelAddress,omitempty"`
}

func (x *GetShortAbelAddressFromAbelAddressResult) Reset() {
	*x = GetShortAbelAddressFromAbelAddressResult{}
	mi := &file_core_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShortAbelAddressFromAbelAddressResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShortAbelAddressFromAbelAddressResult) ProtoMessage() {}

func (x *GetShortAbelAddressFromAbelAddressResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShortAbelAddressFromAbelAddressResult.ProtoReflect.Descriptor instead.
func (*GetShortAbelAddressFromAbelAddressResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{18}
}

func (x *GetShortAbelAddressFromAbelAddressResult) GetShortAbelAddress() []byte {
	if x != nil {
		return x.ShortAbelAddress
	}
	return nil
}

type DecodeCoinAddressFromTxOutDataArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxVersion uint32 `protobuf:"varint,1,opt,name=txVersion,proto3" json:"txVersion,omitempty"`
	TxOutData []byte `protobuf:"bytes,2,opt,name=txOutData,proto3" json:"txOutData,omitempty"`
}

func (x *DecodeCoinAddressFromTxOutDataArgs) Reset() {
	*x = DecodeCoinAddressFromTxOutDataArgs{}
	mi := &file_core_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCoinAddressFromTxOutDataArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCoinAddressFromTxOutDataArgs) ProtoMessage() {}

func (x *DecodeCoinAddressFromTxOutDataArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCoinAddressFromTxOutDataArgs.ProtoReflect.Descriptor instead.
func (*DecodeCoinAddressFromTxOutDataArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{19}
}

func (x *DecodeCoinAddressFromTxOutDataArgs) GetTxVersion() uint32 {
	if x != nil {
		return x.TxVersion
	}
	return 0
}

func (x *DecodeCoinAddressFromTxOutDataArgs) GetTxOutData() []byte {
	if x != nil {
		return x.TxOutData
	}
	return nil
}

type DecodeCoinAddressFromTxOutDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinAddress []byte `protobuf:"bytes,1,opt,name=coinAddress,proto3" json:"coinAddress,omitempty"`
}

func (x *DecodeCoinAddressFromTxOutDataResult) Reset() {
	*x = DecodeCoinAddressFromTxOutDataResult{}
	mi := &file_core_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCoinAddressFromTxOutDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCoinAddressFromTxOutDataResult) ProtoMessage() {}

func (x *DecodeCoinAddressFromTxOutDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCoinAddressFromTxOutDataResult.ProtoReflect.Descriptor instead.
func (*DecodeCoinAddressFromTxOutDataResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{20}
}

func (x *DecodeCoinAddressFromTxOutDataResult) GetCoinAddress() []byte {
	if x != nil {
		return x.CoinAddress
	}
	return nil
}

type CoinReceiveFromTxOutDataArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxVersion              uint32 `protobuf:"varint,1,opt,name=txVersion,proto3" json:"txVersion,omitempty"`
	TxOutData              []byte `protobuf:"bytes,2,opt,name=txOutData,proto3" json:"txOutData,omitempty"`
	AccountPrivacyLevel    uint32 `protobuf:"varint,3,opt,name=accountPrivacyLevel,proto3" json:"accountPrivacyLevel,omitempty"`
	CoinDetectorRootKey    []byte `protobuf:"bytes,4,opt,name=coinDetectorRootKey,proto3" json:"coinDetectorRootKey,omitempty"`
	CoinViewSecretRootSeed []byte `protobuf:"bytes,5,opt,name=coinViewSecretRootSeed,proto3" json:"coinViewSecretRootSeed,omitempty"`
}

func (x *CoinReceiveFromTxOutDataArgs) Reset() {
	*x = CoinReceiveFromTxOutDataArgs{}
	mi := &file_core_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinReceiveFromTxOutDataArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReceiveFromTxOutDataArgs) ProtoMessage() {}

func (x *CoinReceiveFromTxOutDataArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReceiveFromTxOutDataArgs.ProtoReflect.Descriptor instead.
func (*CoinReceiveFromTxOutDataArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{21}
}

func (x *CoinReceiveFromTxOutDataArgs) GetTxVersion() uint32 {
	if x != nil {
		return x.TxVersion
	}
	return 0
}

func (x *CoinReceiveFromTxOutDataArgs) GetTxOutData() []byte {
	if x != nil {
		return x.TxOutData
	}
	return nil
}

func (x *CoinReceiveFromTxOutDataArgs) GetAccountPrivacyLevel() uint32 {
	if x != nil {
		return x.AccountPrivacyLevel
	}
	return 0
}

func (x *CoinReceiveFromTxOutDataArgs) GetCoinDetectorRootKey() []byte {
	if x != nil {
		return x.CoinDetectorRootKey
	}
	return nil
}

func (x *CoinReceiveFromTxOutDataArgs) GetCoinViewSecretRootSeed() []byte {
	if x != nil {
		return x.CoinViewSecretRootSeed
	}
	return nil
}

type CoinReceiveFromTxOutDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	CoinValue uint64 `protobuf:"varint,2,opt,name=coinValue,proto3" json:"coinValue,omitempty"`
}

func (x *CoinReceiveFromTxOutDataResult) Reset() {
	*x = CoinReceiveFromTxOutDataResult{}
	mi := &file_core_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinReceiveFromTxOutDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReceiveFromTxOutDataResult) ProtoMessage() {}

func (x *CoinReceiveFromTxOutDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReceiveFromTxOutDataResult.ProtoReflect.Descriptor instead.
func (*CoinReceiveFromTxOutDataResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{22}
}

func (x *CoinReceiveFromTxOutDataResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CoinReceiveFromTxOutDataResult) GetCoinValue() uint64 {
	if x != nil {
		return x.CoinValue
	}
	return 0
}

type GenerateRawTxRequestArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxInDescs        []*TxInDescMessage  `protobuf:"bytes,1,rep,name=txInDescs,proto3" json:"txInDescs,omitempty"`
	TxOutDescs       []*TxOutDescMessage `protobuf:"bytes,2,rep,name=txOutDescs,proto3" json:"txOutDescs,omitempty"`
	TxRingBlockDescs []*BlockDescMessage `protobuf:"bytes,3,rep,name=txRingBlockDescs,proto3" json:"txRingBlockDescs,omitempty"`
	TxFee            int64               `protobuf:"varint,4,opt,name=txFee,proto3" json:"txFee,omitempty"`
}

func (x *GenerateRawTxRequestArgs) Reset() {
	*x = GenerateRawTxRequestArgs{}
	mi := &file_core_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRawTxRequestArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRawTxRequestArgs) ProtoMessage() {}

func (x *GenerateRawTxRequestArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRawTxRequestArgs.ProtoReflect.Descriptor instead.
func (*GenerateRawTxRequestArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{23}
}

func (x *GenerateRawTxRequestArgs) GetTxInDescs() []*TxInDescMessage {
	if x != nil {
		return x.TxInDescs
	}
	return nil
}

func (x *GenerateRawTxRequestArgs) GetTxOutDescs() []*TxOutDescMessage {
	if x != nil {
		return x.TxOutDescs
	}
	return nil
}

func (x *GenerateRawTxRequestArgs) GetTxRingBlockDescs() []*BlockDescMessage {
	if x != nil {
		return x.TxRingBlockDescs
	}
	return nil
}

func (x *GenerateRawTxRequestArgs) GetTxFee() int64 {
	if x != nil {
		return x.TxFee
	}
	return 0
}

type GenerateRawTxRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GenerateRawTxRequestResult) Reset() {
	*x = GenerateRawTxRequestResult{}
	mi := &file_core_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRawTxRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRawTxRequestResult) ProtoMessage() {}

func (x *GenerateRawTxRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRawTxRequestResult.ProtoReflect.Descriptor instead.
func (*GenerateRawTxRequestResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateRawTxRequestResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type GenerateRawTxDataArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedTxRequest  []byte   `protobuf:"bytes,1,opt,name=serializedTxRequest,proto3" json:"serializedTxRequest,omitempty"`
	PrivacyLevels        []int32  `protobuf:"varint,2,rep,packed,name=privacyLevels,proto3" json:"privacyLevels,omitempty"`
	SpendKeyRootSeeds    [][]byte `protobuf:"bytes,3,rep,name=spendKeyRootSeeds,proto3" json:"spendKeyRootSeeds,omitempty"`
	SerialNoKeyRootSeeds [][]byte `protobuf:"bytes,4,rep,name=serialNoKeyRootSeeds,proto3" json:"serialNoKeyRootSeeds,omitempty"`
	ViewKeyRootSeeds     [][]byte `protobuf:"bytes,5,rep,name=viewKeyRootSeeds,proto3" json:"viewKeyRootSeeds,omitempty"`
	DetectorRootKeys     [][]byte `protobuf:"bytes,6,rep,name=detectorRootKeys,proto3" json:"detectorRootKeys,omitempty"`
}

func (x *GenerateRawTxDataArgs) Reset() {
	*x = GenerateRawTxDataArgs{}
	mi := &file_core_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRawTxDataArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRawTxDataArgs) ProtoMessage() {}

func (x *GenerateRawTxDataArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRawTxDataArgs.ProtoReflect.Descriptor instead.
func (*GenerateRawTxDataArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{25}
}

func (x *GenerateRawTxDataArgs) GetSerializedTxRequest() []byte {
	if x != nil {
		return x.SerializedTxRequest
	}
	return nil
}

func (x *GenerateRawTxDataArgs) GetPrivacyLevels() []int32 {
	if x != nil {
		return x.PrivacyLevels
	}
	return nil
}

func (x *GenerateRawTxDataArgs) GetSpendKeyRootSeeds() [][]byte {
	if x != nil {
		return x.SpendKeyRootSeeds
	}
	return nil
}

func (x *GenerateRawTxDataArgs) GetSerialNoKeyRootSeeds() [][]byte {
	if x != nil {
		return x.SerialNoKeyRootSeeds
	}
	return nil
}

func (x *GenerateRawTxDataArgs) GetViewKeyRootSeeds() [][]byte {
	if x != nil {
		return x.ViewKeyRootSeeds
	}
	return nil
}

func (x *GenerateRawTxDataArgs) GetDetectorRootKeys() [][]byte {
	if x != nil {
		return x.DetectorRootKeys
	}
	return nil
}

type GenerateRawTxDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Txid []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *GenerateRawTxDataResult) Reset() {
	*x = GenerateRawTxDataResult{}
	mi := &file_core_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateRawTxDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRawTxDataResult) ProtoMessage() {}

func (x *GenerateRawTxDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRawTxDataResult.ProtoReflect.Descriptor instead.
func (*GenerateRawTxDataResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{26}
}

func (x *GenerateRawTxDataResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenerateRawTxDataResult) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type GenerateCoinSerialNumberArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid                   []byte              `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index                  int32               `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	SerialNoSecretRootSeed []byte              `protobuf:"bytes,3,opt,name=serialNoSecretRootSeed,proto3" json:"serialNoSecretRootSeed,omitempty"`
	RingBlockDescs         []*BlockDescMessage `protobuf:"bytes,4,rep,name=ringBlockDescs,proto3" json:"ringBlockDescs,omitempty"`
}

func (x *GenerateCoinSerialNumberArgs) Reset() {
	*x = GenerateCoinSerialNumberArgs{}
	mi := &file_core_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCoinSerialNumberArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCoinSerialNumberArgs) ProtoMessage() {}

func (x *GenerateCoinSerialNumberArgs) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCoinSerialNumberArgs.ProtoReflect.Descriptor instead.
func (*GenerateCoinSerialNumberArgs) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{27}
}

func (x *GenerateCoinSerialNumberArgs) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *GenerateCoinSerialNumberArgs) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GenerateCoinSerialNumberArgs) GetSerialNoSecretRootSeed() []byte {
	if x != nil {
		return x.SerialNoSecretRootSeed
	}
	return nil
}

func (x *GenerateCoinSerialNumberArgs) GetRingBlockDescs() []*BlockDescMessage {
	if x != nil {
		return x.RingBlockDescs
	}
	return nil
}

type GenerateCoinSerialNumberResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber []byte `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
}

func (x *GenerateCoinSerialNumberResult) Reset() {
	*x = GenerateCoinSerialNumberResult{}
	mi := &file_core_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCoinSerialNumberResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCoinSerialNumberResult) ProtoMessage() {}

func (x *GenerateCoinSerialNumberResult) ProtoReflect() protoreflect.Message {
	mi := &file_core_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCoinSerialNumberResult.ProtoReflect.Descriptor instead.
func (*GenerateCoinSerialNumberResult) Descriptor() ([]byte, []int) {
	return file_core_proto_rawDescGZIP(), []int{28}
}

func (x *GenerateCoinSerialNumberResult) GetSerialNumber() []byte {
	if x != nil {
		return x.SerialNumber
	}
	return nil
}

var File_core_proto protoreflect.FileDescriptor

var file_core_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x54, 0x78, 0x49, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x63, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x4a, 0x0a, 0x10, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x10,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x40, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x66, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x65, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x66, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x6f,
	0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x69,
	0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x2b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65,
	0x65, 0x64, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b,
	0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f,
	0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xf3, 0x01,
	0x0a, 0x2d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4b, 0x65, 0x79, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x39, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f,
	0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x3b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65,
	0x65, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x6f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x49, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x24, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a,
	0x26, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x61,
	0x6e, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x62,
	0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x22, 0x49,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x62,
	0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x4d, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x4a, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x65,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x62, 0x65, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x41, 0x62, 0x65, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x60, 0x0a, 0x22, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x4f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78,
	0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x24, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x63,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x4f,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x78, 0x49, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x78, 0x49, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x74, 0x78, 0x49,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x73, 0x12, 0x42,
	0x0a, 0x10, 0x74, 0x78, 0x52, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x10, 0x74, 0x78, 0x52, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x78, 0x46, 0x65, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x15, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x6f,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x41, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x77, 0x54, 0x78, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x73, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x73, 0x22, 0x44, 0x0a, 0x1e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x30, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x61, 0x6e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x16, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x61, 0x6e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_proto_rawDescOnce sync.Once
	file_core_proto_rawDescData = file_core_proto_rawDesc
)

func file_core_proto_rawDescGZIP() []byte {
	file_core_proto_rawDescOnce.Do(func() {
		file_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_proto_rawDescData)
	})
	return file_core_proto_rawDescData
}

var file_core_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_core_proto_goTypes = []any{
	(*TxInDescMessage)(nil),                                             // 0: core.TxInDescMessage
	(*TxOutDescMessage)(nil),                                            // 1: core.TxOutDescMessage
	(*BlockDescMessage)(nil),                                            // 2: core.BlockDescMessage
	(*GenerateSafeCryptoSeedArgs)(nil),                                  // 3: core.GenerateSafeCryptoSeedArgs
	(*GenerateSafeCryptoSeedResult)(nil),                                // 4: core.GenerateSafeCryptoSeedResult
	(*GenerateCryptoKeysAndAddressByRootSeedsArgs)(nil),                 // 5: core.GenerateCryptoKeysAndAddressByRootSeedsArgs
	(*GenerateCryptoKeysAndAddressByRootSeedsResult)(nil),               // 6: core.GenerateCryptoKeysAndAddressByRootSeedsResult
	(*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs)(nil),   // 7: core.GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandArgs
	(*GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult)(nil), // 8: core.GenerateCryptoKeysAndAddressByRootSeedsFromPublicRandResult
	(*GetCoinAddressFromCryptoAddressArgs)(nil),                         // 9: core.GetCoinAddressFromCryptoAddressArgs
	(*GetCoinAddressFromCryptoAddressResult)(nil),                       // 10: core.GetCoinAddressFromCryptoAddressResult
	(*ExtractPublicRandFromCoinAddressArgs)(nil),                        // 11: core.ExtractPublicRandFromCoinAddressArgs
	(*ExtractPublicRandFromCoinAddressResult)(nil),                      // 12: core.ExtractPublicRandFromCoinAddressResult
	(*GetAbelAddressFromCryptoAddressArgs)(nil),                         // 13: core.GetAbelAddressFromCryptoAddressArgs
	(*GetAbelAddressFromCryptoAddressResult)(nil),                       // 14: core.GetAbelAddressFromCryptoAddressResult
	(*GetCryptoAddressFromAbelAddressArgs)(nil),                         // 15: core.GetCryptoAddressFromAbelAddressArgs
	(*GetCryptoAddressFromAbelAddressResult)(nil),                       // 16: core.GetCryptoAddressFromAbelAddressResult
	(*GetShortAbelAddressFromAbelAddressArgs)(nil),                      // 17: core.GetShortAbelAddressFromAbelAddressArgs
	(*GetShortAbelAddressFromAbelAddressResult)(nil),                    // 18: core.GetShortAbelAddressFromAbelAddressResult
	(*DecodeCoinAddressFromTxOutDataArgs)(nil),                          // 19: core.DecodeCoinAddressFromTxOutDataArgs
	(*DecodeCoinAddressFromTxOutDataResult)(nil),                        // 20: core.DecodeCoinAddressFromTxOutDataResult
	(*CoinReceiveFromTxOutDataArgs)(nil),                                // 21: core.CoinReceiveFromTxOutDataArgs
	(*CoinReceiveFromTxOutDataResult)(nil),                              // 22: core.CoinReceiveFromTxOutDataResult
	(*GenerateRawTxRequestArgs)(nil),                                    // 23: core.GenerateRawTxRequestArgs
	(*GenerateRawTxRequestResult)(nil),                                  // 24: core.GenerateRawTxRequestResult
	(*GenerateRawTxDataArgs)(nil),                                       // 25: core.GenerateRawTxDataArgs
	(*GenerateRawTxDataResult)(nil),                                     // 26: core.GenerateRawTxDataResult
	(*GenerateCoinSerialNumberArgs)(nil),                                // 27: core.GenerateCoinSerialNumberArgs
	(*GenerateCoinSerialNumberResult)(nil),                              // 28: core.GenerateCoinSerialNumberResult
}
var file_core_proto_depIdxs = []int32{
	0, // 0: core.GenerateRawTxRequestArgs.txInDescs:type_name -> core.TxInDescMessage
	1, // 1: core.GenerateRawTxRequestArgs.txOutDescs:type_name -> core.TxOutDescMessage
	2, // 2: core.GenerateRawTxRequestArgs.txRingBlockDescs:type_name -> core.BlockDescMessage
	2, // 3: core.GenerateCoinSerialNumberArgs.ringBlockDescs:type_name -> core.BlockDescMessage
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_core_proto_init() }
func file_core_proto_init() {
	if File_core_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_proto_goTypes,
		DependencyIndexes: file_core_proto_depIdxs,
		MessageInfos:      file_core_proto_msgTypes,
	}.Build()
	File_core_proto = out.File
	file_core_proto_rawDesc = nil
	file_core_proto_goTypes = nil
	file_core_proto_depIdxs = nil
}
